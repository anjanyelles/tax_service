{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import {\n//   Button,\n//   Checkbox,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n//   FormControl,\n//   FormControlLabel,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   Table as MuiTable,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n// } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import GridItem from \"components/Grid/GridItem.js\";\n// import GridContainer from \"components/Grid/GridContainer.js\";\n// import Card from \"components/Card/Card.js\";\n// import CardHeader from \"components/Card/CardHeader.js\";\n// import CardBody from \"components/Card/CardBody.js\";\n// import styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\n// import {\n//   fetchAllEmployeesoFaManager,\n//   assignLeadsToEmployee,\n//   fetchLeadsForManager,\n// } from \"views/Apis/AfterLogin\";\n// const useStyles = makeStyles(styles);\n// export default function GetLeadsManagerView() {\n//   const classes = useStyles();\n//   const managerId = sessionStorage.getItem(\"userId\");\n//   const [leads, setLeads] = useState([]);\n//   const [selectedLeads, setSelectedLeads] = useState([]);\n//   const [page, setPage] = useState(0);\n//   const [size, setSize] = useState(10);\n//   const [totalPages, setTotalPages] = useState(0);\n//   const [employees, setEmployees] = useState([]);\n//   const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\n//   const [openDialog, setOpenDialog] = useState(false);\n//   const [filterType, setFilterType] = useState(\"\"); // \"assigned\", \"unassigned\", \"employee\"\n//   const [selectedUserId, setSelectedUserId] = useState(\"\");\n//   const fetchLeads = async () => {\n//     try {\n//       let assignedOnly = false;\n//       let unassignedOnly = false;\n//       let userId = \"\";\n//       if (filterType === \"assigned\") assignedOnly = true;\n//       else if (filterType === \"unassigned\") unassignedOnly = true;\n//       else if (filterType === \"employee\") userId = selectedUserId;\n//       const res = await fetchLeadsForManager({\n//         page,\n//         size,\n//         managerId,\n//         assignedOnly,\n//         unassignedOnly,\n//         userId,\n//       });\n//       if (res?.leads) {\n//         setLeads(res.leads);\n//         setTotalPages(res.totalPages);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching leads:\", error.message);\n//     }\n//   };\n//   const fetchEmployees = async () => {\n//     try {\n//       const allUsers = await fetchAllEmployeesoFaManager();\n//       const filteredEmployees = allUsers.filter(\n//         (u) => u.userType === \"employee\" && u.managerId === managerId\n//       );\n//       setEmployees(filteredEmployees);\n//     } catch (error) {\n//       console.error(\"Failed to fetch employees:\", error.message);\n//     }\n//   };\n//   useEffect(() => {\n//     fetchLeads();\n//     fetchEmployees();\n//   }, [page, size]);\n//   useEffect(() => {\n//     fetchLeads();\n//   }, [page, size, filterType, selectedUserId]);\n//   const handleAssignLeads = async () => {\n//     if (!selectedLeads.length || !selectedEmployeeId) {\n//       alert(\"Please select leads and an employee.\");\n//       return;\n//     }\n//     try {\n//       const res = await assignLeadsToEmployee({\n//         leadIds: selectedLeads,\n//         employeeId: selectedEmployeeId,\n//       });\n//       if (res.status) {\n//         alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\n//         setSelectedLeads([]);\n//         setSelectedEmployeeId(\"\");\n//         setOpenDialog(false);\n//         fetchLeads();\n//       } else {\n//         alert(res.message || \"Failed to assign leads.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Assignment failed:\", error.message);\n//     }\n//   };\n//   return (\n//     <div>\n//       {selectedLeads.length > 0 && (\n//         <div style={{ textAlign: \"right\", marginBottom: \"10px\" }}>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             onClick={() => setOpenDialog(true)}\n//           >\n//             Assign Selected Leads To Employee\n//           </Button>\n//         </div>\n//       )}\n//       <GridContainer>\n//         <GridItem xs={12}>\n//           <Card>\n//             <CardBody>\n//               <GridContainer spacing={3}>\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControl fullWidth>\n//                     <InputLabel>Filter by Employee</InputLabel>\n//                     <Select\n//                       value={filterType === \"employee\" ? selectedUserId : \"\"}\n//                       onChange={(e) => {\n//                         const value = e.target.value;\n//                         if (value === \"\") {\n//                           setFilterType(\"\");\n//                           setSelectedUserId(\"\");\n//                         } else {\n//                           setFilterType(\"employee\");\n//                           setSelectedUserId(value);\n//                         }\n//                         setPage(0);\n//                       }}\n//                     >\n//                       <MenuItem value=\"\">All Employees</MenuItem>\n//                       {employees.map((emp) => (\n//                         <MenuItem key={emp.id} value={emp.id}>\n//                           {emp.firstName} {emp.lastName}\n//                         </MenuItem>\n//                       ))}\n//                     </Select>\n//                   </FormControl>\n//                 </GridItem>\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={filterType === \"assigned\"}\n//                         onChange={() => {\n//                           setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\n//                           setSelectedUserId(\"\");\n//                           setPage(0);\n//                         }}\n//                       />\n//                     }\n//                     label=\"Assigned Only\"\n//                   />\n//                 </GridItem>\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={filterType === \"unassigned\"}\n//                         onChange={() => {\n//                           setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\n//                           setSelectedUserId(\"\");\n//                           setPage(0);\n//                         }}\n//                       />\n//                     }\n//                     label=\"Unassigned Only\"\n//                   />\n//                 </GridItem>\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControl fullWidth>\n//                     <InputLabel>Page Size</InputLabel>\n//                     <Select\n//                       value={size}\n//                       onChange={(e) => {\n//                         setSize(e.target.value);\n//                         setPage(0);\n//                       }}\n//                     >\n//                       <MenuItem value={20}>20</MenuItem>\n//                       <MenuItem value={50}>50</MenuItem>\n//                       <MenuItem value={100}>100</MenuItem>\n//                     </Select>\n//                   </FormControl>\n//                 </GridItem>\n//               </GridContainer>\n//             </CardBody>\n//           </Card>\n//           <Card>\n//             <CardHeader color=\"info\">\n//               <h4 className={classes.cardTitleWhite}>My Assigned Leads</h4>\n//               <p className={classes.cardCategoryWhite}>\n//                 Page {page + 1} of {totalPages}\n//               </p>\n//             </CardHeader>\n//             <CardBody>\n//               <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n//                 <Button disabled={page === 0} onClick={() => setPage(page - 1)}>\n//                   Previous\n//                 </Button>\n//                 <Button\n//                   disabled={page >= totalPages - 1}\n//                   onClick={() => setPage(page + 1)}\n//                 >\n//                   Next\n//                 </Button>\n//               </div>\n//               <div style={{ overflowX: \"auto\" }}>\n//                 <MuiTable>\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={\n//                             selectedLeads.length > 0 &&\n//                             selectedLeads.length === leads.length\n//                           }\n//                           indeterminate={\n//                             selectedLeads.length > 0 &&\n//                             selectedLeads.length < leads.length\n//                           }\n//                           onChange={(e) => {\n//                             if (e.target.checked) {\n//                               setSelectedLeads(leads.map((l) => l.id));\n//                             } else {\n//                               setSelectedLeads([]);\n//                             }\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell>Name</TableCell>\n//                       <TableCell>Email</TableCell>\n//                       <TableCell>Phone</TableCell>\n//                       <TableCell>Address</TableCell>\n//                       <TableCell>Status</TableCell>\n//                       <TableCell>Source</TableCell>\n//                       <TableCell>Created At</TableCell>\n//                       <TableCell>Assigned To</TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                     {leads.map((lead) => {\n//                       const isChecked = selectedLeads.includes(lead.id);\n//                       return (\n//                         <TableRow key={lead.id}>\n//                           <TableCell padding=\"checkbox\">\n//                             <Checkbox\n//                               checked={isChecked}\n//                               onChange={() => {\n//                                 if (isChecked) {\n//                                   setSelectedLeads(\n//                                     selectedLeads.filter((id) => id !== lead.id)\n//                                   );\n//                                 } else {\n//                                   setSelectedLeads([...selectedLeads, lead.id]);\n//                                 }\n//                               }}\n//                             />\n//                           </TableCell>\n//                           <TableCell>{lead.name}</TableCell>\n//                           <TableCell>{lead.email}</TableCell>\n//                           <TableCell>{lead.phoneNumber}</TableCell>\n//                           <TableCell>{lead.address}</TableCell>\n//                           <TableCell>{lead.leadStatus}</TableCell>\n//                           <TableCell>{lead.source}</TableCell>\n//                           <TableCell>\n//                             {new Date(lead.createdAt).toLocaleDateString()}\n//                           </TableCell>\n//                           <TableCell>{lead.userName || \"-\"}</TableCell>\n//                         </TableRow>\n//                       );\n//                     })}\n//                   </TableBody>\n//                 </MuiTable>\n//               </div>\n//             </CardBody>\n//           </Card>\n//         </GridItem>\n//       </GridContainer>\n//       <Dialog\n//         open={openDialog}\n//         onClose={() => setOpenDialog(false)}\n//         fullWidth\n//         maxWidth=\"sm\"\n//       >\n//         <DialogTitle>Assign Leads to Employee</DialogTitle>\n//         <DialogContent>\n//           <p>You have selected {selectedLeads.length} leads.</p>\n//           <FormControl fullWidth>\n//             <InputLabel>Select Employee</InputLabel>\n//             <Select\n//               value={selectedEmployeeId}\n//               onChange={(e) => setSelectedEmployeeId(e.target.value)}\n//             >\n//               {employees.map((emp) => (\n//                 <MenuItem key={emp.id} value={emp.id}>\n//                   {emp.firstName} {emp.lastName}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\n//             Cancel\n//           </Button>\n//           <Button\n//             onClick={handleAssignLeads}\n//             color=\"primary\"\n//             disabled={!selectedEmployeeId}\n//           >\n//             Submit\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </div>\n//   );\n// }\nimport React,{useEffect,useState}from\"react\";import{Button,Checkbox,Dialog,DialogActions,DialogContent,DialogTitle,FormControl,FormControlLabel,InputLabel,MenuItem,Select,Table as MuiTable,TableBody,TableCell,TableHead,TableRow}from\"@material-ui/core\";import{makeStyles}from\"@material-ui/core/styles\";import GridItem from\"components/Grid/GridItem.js\";import GridContainer from\"components/Grid/GridContainer.js\";import Card from\"components/Card/Card.js\";import CardHeader from\"components/Card/CardHeader.js\";import CardBody from\"components/Card/CardBody.js\";import styles from\"assets/jss/material-dashboard-react/views/dashboardStyle.js\";import{fetchAllEmployeesoFaManager,assignLeadsToEmployee,fetchLeadsForManager}from\"views/Apis/AfterLogin\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const useStyles=makeStyles(styles);export default function GetLeadsManagerView(){const classes=useStyles();const managerId=sessionStorage.getItem(\"userId\");const[leads,setLeads]=useState([]);const[selectedLeads,setSelectedLeads]=useState([]);const[page,setPage]=useState(0);const[size,setSize]=useState(10);const[totalPages,setTotalPages]=useState(0);const[employees,setEmployees]=useState([]);const[selectedEmployeeId,setSelectedEmployeeId]=useState(\"\");const[openDialog,setOpenDialog]=useState(false);const[filterType,setFilterType]=useState(\"\");const[selectedUserId,setSelectedUserId]=useState(\"\");const fetchLeads=async()=>{try{let assignedOnly=false;let unassignedOnly=false;let userId=\"\";if(filterType===\"assigned\")assignedOnly=true;else if(filterType===\"unassigned\")unassignedOnly=true;else if(filterType===\"employee\")userId=selectedUserId;const res=await fetchLeadsForManager({page,size,managerId,assignedOnly,unassignedOnly,userId});if(res!==null&&res!==void 0&&res.leads){setLeads(res.leads);setTotalPages(res.totalPages);}}catch(error){console.error(\"Error fetching leads:\",error.message);}};const fetchEmployees=async()=>{try{const allUsers=await fetchAllEmployeesoFaManager();const filteredEmployees=allUsers.filter(u=>u.userType===\"employee\"&&u.managerId===managerId);setEmployees(filteredEmployees);}catch(error){console.error(\"Failed to fetch employees:\",error.message);}};useEffect(()=>{fetchLeads();fetchEmployees();},[page,size]);useEffect(()=>{fetchLeads();},[page,size,filterType,selectedUserId]);const handleAssignLeads=async()=>{if(!selectedLeads.length||!selectedEmployeeId){alert(\"Please select leads and an employee.\");return;}try{const res=await assignLeadsToEmployee({leadIds:selectedLeads,employeeId:selectedEmployeeId});if(res.status){alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);setSelectedLeads([]);setSelectedEmployeeId(\"\");setOpenDialog(false);fetchLeads();}else{alert(res.message||\"Failed to assign leads.\");}}catch(error){console.error(\"Assignment failed:\",error.message);}};return/*#__PURE__*/_jsxs(\"div\",{children:[selectedLeads.length>0&&/*#__PURE__*/_jsx(\"div\",{style:{textAlign:\"right\",marginBottom:\"10px\"},children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:()=>setOpenDialog(true),children:\"Assign Selected Leads To Employee\"})}),/*#__PURE__*/_jsx(GridContainer,{children:/*#__PURE__*/_jsxs(GridItem,{xs:12,children:[/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsxs(GridContainer,{spacing:3,children:[/*#__PURE__*/_jsx(GridItem,{xs:12,sm:6,md:3,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Filter by Employee\"}),/*#__PURE__*/_jsxs(Select,{value:filterType===\"employee\"?selectedUserId:\"\",onChange:e=>{const value=e.target.value;if(value===\"\"){setFilterType(\"\");setSelectedUserId(\"\");}else{setFilterType(\"employee\");setSelectedUserId(value);}setPage(0);},children:[/*#__PURE__*/_jsx(MenuItem,{value:\"\",children:\"All Employees\"}),employees.map(emp=>/*#__PURE__*/_jsxs(MenuItem,{value:emp.id,children:[emp.firstName,\" \",emp.lastName]},emp.id))]})]})}),/*#__PURE__*/_jsx(GridItem,{xs:12,sm:6,md:3,children:/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{checked:filterType===\"assigned\",onChange:()=>{setFilterType(filterType===\"assigned\"?\"\":\"assigned\");setSelectedUserId(\"\");setPage(0);}}),label:\"Assigned Only\"})}),/*#__PURE__*/_jsx(GridItem,{xs:12,sm:6,md:3,children:/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{checked:filterType===\"unassigned\",onChange:()=>{setFilterType(filterType===\"unassigned\"?\"\":\"unassigned\");setSelectedUserId(\"\");setPage(0);}}),label:\"Unassigned Only\"})}),/*#__PURE__*/_jsx(GridItem,{xs:12,sm:6,md:3,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Page Size\"}),/*#__PURE__*/_jsxs(Select,{value:size,onChange:e=>{setSize(e.target.value);setPage(0);},children:[/*#__PURE__*/_jsx(MenuItem,{value:20,children:\"20\"}),/*#__PURE__*/_jsx(MenuItem,{value:50,children:\"50\"}),/*#__PURE__*/_jsx(MenuItem,{value:100,children:\"100\"})]})]})})]})})}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(CardHeader,{color:\"info\",children:[/*#__PURE__*/_jsx(\"h4\",{className:classes.cardTitleWhite,children:\"My Assigned Leads\"}),/*#__PURE__*/_jsxs(\"p\",{className:classes.cardCategoryWhite,children:[\"Page \",page+1,\" of \",totalPages]})]}),/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",justifyContent:\"space-between\"},children:[/*#__PURE__*/_jsx(Button,{disabled:page===0,onClick:()=>setPage(page-1),children:\"Previous\"}),/*#__PURE__*/_jsx(Button,{disabled:page>=totalPages-1,onClick:()=>setPage(page+1),children:\"Next\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{overflowX:\"auto\"},children:/*#__PURE__*/_jsxs(MuiTable,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{padding:\"checkbox\",children:/*#__PURE__*/_jsx(Checkbox,{checked:selectedLeads.length>0&&selectedLeads.length===leads.filter(l=>l.userId===null).length,indeterminate:selectedLeads.length>0&&selectedLeads.length<leads.filter(l=>l.userId===null).length,onChange:e=>{if(e.target.checked){setSelectedLeads(leads.filter(l=>l.userId===null).map(l=>l.id));}else{setSelectedLeads([]);}}})}),/*#__PURE__*/_jsx(TableCell,{children:\"Name\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Email\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Phone\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Address\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Status\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Source\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Created At\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Assigned To\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:leads.map(lead=>{const isChecked=selectedLeads.includes(lead.id);return/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{padding:\"checkbox\",children:lead.userId===null?/*#__PURE__*/_jsx(Checkbox,{checked:isChecked,onChange:()=>{if(isChecked){setSelectedLeads(selectedLeads.filter(id=>id!==lead.id));}else{setSelectedLeads([...selectedLeads,lead.id]);}}}):null}),/*#__PURE__*/_jsx(TableCell,{children:lead.name}),/*#__PURE__*/_jsx(TableCell,{children:lead.email}),/*#__PURE__*/_jsx(TableCell,{children:lead.phoneNumber}),/*#__PURE__*/_jsx(TableCell,{children:lead.address}),/*#__PURE__*/_jsx(TableCell,{children:lead.leadStatus}),/*#__PURE__*/_jsx(TableCell,{children:lead.source}),/*#__PURE__*/_jsx(TableCell,{children:new Date(lead.createdAt).toLocaleDateString()}),/*#__PURE__*/_jsx(TableCell,{children:lead.userName||\"-\"})]},lead.id);})})]})})]})]})]})}),/*#__PURE__*/_jsxs(Dialog,{open:openDialog,onClose:()=>setOpenDialog(false),fullWidth:true,maxWidth:\"sm\",children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Assign Leads to Employee\"}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"You have selected \",selectedLeads.length,\" leads.\"]}),/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Select Employee\"}),/*#__PURE__*/_jsx(Select,{value:selectedEmployeeId,onChange:e=>setSelectedEmployeeId(e.target.value),children:employees.map(emp=>/*#__PURE__*/_jsxs(MenuItem,{value:emp.id,children:[emp.firstName,\" \",emp.lastName]},emp.id))})]})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:()=>setOpenDialog(false),color:\"secondary\",children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:handleAssignLeads,color:\"primary\",disabled:!selectedEmployeeId,children:\"Submit\"})]})]})]});}","map":{"version":3,"names":["React","useEffect","useState","Button","Checkbox","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","FormControlLabel","InputLabel","MenuItem","Select","Table","MuiTable","TableBody","TableCell","TableHead","TableRow","makeStyles","GridItem","GridContainer","Card","CardHeader","CardBody","styles","fetchAllEmployeesoFaManager","assignLeadsToEmployee","fetchLeadsForManager","jsx","_jsx","jsxs","_jsxs","useStyles","GetLeadsManagerView","classes","managerId","sessionStorage","getItem","leads","setLeads","selectedLeads","setSelectedLeads","page","setPage","size","setSize","totalPages","setTotalPages","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","openDialog","setOpenDialog","filterType","setFilterType","selectedUserId","setSelectedUserId","fetchLeads","assignedOnly","unassignedOnly","userId","res","error","console","message","fetchEmployees","allUsers","filteredEmployees","filter","u","userType","handleAssignLeads","length","alert","leadIds","employeeId","status","assignedLeadCount","children","style","textAlign","marginBottom","variant","color","onClick","xs","spacing","sm","md","fullWidth","value","onChange","e","target","map","emp","id","firstName","lastName","control","checked","label","className","cardTitleWhite","cardCategoryWhite","display","justifyContent","disabled","overflowX","padding","l","indeterminate","lead","isChecked","includes","name","email","phoneNumber","address","leadStatus","source","Date","createdAt","toLocaleDateString","userName","open","onClose","maxWidth"],"sources":["/Users/anjanyelle/Desktop/copy/tax_service/src/components/Leads/GetLeadsManagerView.js"],"sourcesContent":["\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   Button,\n//   Checkbox,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n//   FormControl,\n//   FormControlLabel,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   Table as MuiTable,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n// } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n\n// import GridItem from \"components/Grid/GridItem.js\";\n// import GridContainer from \"components/Grid/GridContainer.js\";\n// import Card from \"components/Card/Card.js\";\n// import CardHeader from \"components/Card/CardHeader.js\";\n// import CardBody from \"components/Card/CardBody.js\";\n\n// import styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\n// import {\n//   fetchAllEmployeesoFaManager,\n//   assignLeadsToEmployee,\n//   fetchLeadsForManager,\n// } from \"views/Apis/AfterLogin\";\n\n// const useStyles = makeStyles(styles);\n\n// export default function GetLeadsManagerView() {\n//   const classes = useStyles();\n//   const managerId = sessionStorage.getItem(\"userId\");\n\n//   const [leads, setLeads] = useState([]);\n//   const [selectedLeads, setSelectedLeads] = useState([]);\n//   const [page, setPage] = useState(0);\n//   const [size, setSize] = useState(10);\n//   const [totalPages, setTotalPages] = useState(0);\n\n//   const [employees, setEmployees] = useState([]);\n//   const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\n//   const [openDialog, setOpenDialog] = useState(false);\n\n//   const [filterType, setFilterType] = useState(\"\"); // \"assigned\", \"unassigned\", \"employee\"\n//   const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n//   const fetchLeads = async () => {\n//     try {\n//       let assignedOnly = false;\n//       let unassignedOnly = false;\n//       let userId = \"\";\n\n//       if (filterType === \"assigned\") assignedOnly = true;\n//       else if (filterType === \"unassigned\") unassignedOnly = true;\n//       else if (filterType === \"employee\") userId = selectedUserId;\n\n//       const res = await fetchLeadsForManager({\n//         page,\n//         size,\n//         managerId,\n//         assignedOnly,\n//         unassignedOnly,\n//         userId,\n//       });\n\n//       if (res?.leads) {\n//         setLeads(res.leads);\n//         setTotalPages(res.totalPages);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching leads:\", error.message);\n//     }\n//   };\n\n//   const fetchEmployees = async () => {\n//     try {\n//       const allUsers = await fetchAllEmployeesoFaManager();\n//       const filteredEmployees = allUsers.filter(\n//         (u) => u.userType === \"employee\" && u.managerId === managerId\n//       );\n//       setEmployees(filteredEmployees);\n//     } catch (error) {\n//       console.error(\"Failed to fetch employees:\", error.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchLeads();\n//     fetchEmployees();\n//   }, [page, size]);\n\n//   useEffect(() => {\n//     fetchLeads();\n//   }, [page, size, filterType, selectedUserId]);\n\n//   const handleAssignLeads = async () => {\n//     if (!selectedLeads.length || !selectedEmployeeId) {\n//       alert(\"Please select leads and an employee.\");\n//       return;\n//     }\n\n//     try {\n//       const res = await assignLeadsToEmployee({\n//         leadIds: selectedLeads,\n//         employeeId: selectedEmployeeId,\n//       });\n\n//       if (res.status) {\n//         alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\n//         setSelectedLeads([]);\n//         setSelectedEmployeeId(\"\");\n//         setOpenDialog(false);\n//         fetchLeads();\n//       } else {\n//         alert(res.message || \"Failed to assign leads.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Assignment failed:\", error.message);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {selectedLeads.length > 0 && (\n//         <div style={{ textAlign: \"right\", marginBottom: \"10px\" }}>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             onClick={() => setOpenDialog(true)}\n//           >\n//             Assign Selected Leads To Employee\n//           </Button>\n//         </div>\n//       )}\n\n//       <GridContainer>\n//         <GridItem xs={12}>\n//           <Card>\n//             <CardBody>\n//               <GridContainer spacing={3}>\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControl fullWidth>\n//                     <InputLabel>Filter by Employee</InputLabel>\n//                     <Select\n//                       value={filterType === \"employee\" ? selectedUserId : \"\"}\n//                       onChange={(e) => {\n//                         const value = e.target.value;\n//                         if (value === \"\") {\n//                           setFilterType(\"\");\n//                           setSelectedUserId(\"\");\n//                         } else {\n//                           setFilterType(\"employee\");\n//                           setSelectedUserId(value);\n//                         }\n//                         setPage(0);\n//                       }}\n//                     >\n//                       <MenuItem value=\"\">All Employees</MenuItem>\n//                       {employees.map((emp) => (\n//                         <MenuItem key={emp.id} value={emp.id}>\n//                           {emp.firstName} {emp.lastName}\n//                         </MenuItem>\n//                       ))}\n//                     </Select>\n//                   </FormControl>\n//                 </GridItem>\n\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={filterType === \"assigned\"}\n//                         onChange={() => {\n//                           setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\n//                           setSelectedUserId(\"\");\n//                           setPage(0);\n//                         }}\n//                       />\n//                     }\n//                     label=\"Assigned Only\"\n//                   />\n//                 </GridItem>\n\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={filterType === \"unassigned\"}\n//                         onChange={() => {\n//                           setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\n//                           setSelectedUserId(\"\");\n//                           setPage(0);\n//                         }}\n//                       />\n//                     }\n//                     label=\"Unassigned Only\"\n//                   />\n//                 </GridItem>\n\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControl fullWidth>\n//                     <InputLabel>Page Size</InputLabel>\n//                     <Select\n//                       value={size}\n//                       onChange={(e) => {\n//                         setSize(e.target.value);\n//                         setPage(0);\n//                       }}\n//                     >\n//                       <MenuItem value={20}>20</MenuItem>\n//                       <MenuItem value={50}>50</MenuItem>\n//                       <MenuItem value={100}>100</MenuItem>\n//                     </Select>\n//                   </FormControl>\n//                 </GridItem>\n//               </GridContainer>\n//             </CardBody>\n//           </Card>\n\n//           <Card>\n//             <CardHeader color=\"info\">\n//               <h4 className={classes.cardTitleWhite}>My Assigned Leads</h4>\n//               <p className={classes.cardCategoryWhite}>\n//                 Page {page + 1} of {totalPages}\n//               </p>\n//             </CardHeader>\n//             <CardBody>\n//               <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n//                 <Button disabled={page === 0} onClick={() => setPage(page - 1)}>\n//                   Previous\n//                 </Button>\n//                 <Button\n//                   disabled={page >= totalPages - 1}\n//                   onClick={() => setPage(page + 1)}\n//                 >\n//                   Next\n//                 </Button>\n//               </div>\n\n//               <div style={{ overflowX: \"auto\" }}>\n//                 <MuiTable>\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={\n//                             selectedLeads.length > 0 &&\n//                             selectedLeads.length === leads.length\n//                           }\n//                           indeterminate={\n//                             selectedLeads.length > 0 &&\n//                             selectedLeads.length < leads.length\n//                           }\n//                           onChange={(e) => {\n//                             if (e.target.checked) {\n//                               setSelectedLeads(leads.map((l) => l.id));\n//                             } else {\n//                               setSelectedLeads([]);\n//                             }\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell>Name</TableCell>\n//                       <TableCell>Email</TableCell>\n//                       <TableCell>Phone</TableCell>\n//                       <TableCell>Address</TableCell>\n//                       <TableCell>Status</TableCell>\n//                       <TableCell>Source</TableCell>\n//                       <TableCell>Created At</TableCell>\n//                       <TableCell>Assigned To</TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                     {leads.map((lead) => {\n//                       const isChecked = selectedLeads.includes(lead.id);\n//                       return (\n//                         <TableRow key={lead.id}>\n//                           <TableCell padding=\"checkbox\">\n//                             <Checkbox\n//                               checked={isChecked}\n//                               onChange={() => {\n//                                 if (isChecked) {\n//                                   setSelectedLeads(\n//                                     selectedLeads.filter((id) => id !== lead.id)\n//                                   );\n//                                 } else {\n//                                   setSelectedLeads([...selectedLeads, lead.id]);\n//                                 }\n//                               }}\n//                             />\n//                           </TableCell>\n//                           <TableCell>{lead.name}</TableCell>\n//                           <TableCell>{lead.email}</TableCell>\n//                           <TableCell>{lead.phoneNumber}</TableCell>\n//                           <TableCell>{lead.address}</TableCell>\n//                           <TableCell>{lead.leadStatus}</TableCell>\n//                           <TableCell>{lead.source}</TableCell>\n//                           <TableCell>\n//                             {new Date(lead.createdAt).toLocaleDateString()}\n//                           </TableCell>\n//                           <TableCell>{lead.userName || \"-\"}</TableCell>\n//                         </TableRow>\n//                       );\n//                     })}\n//                   </TableBody>\n//                 </MuiTable>\n//               </div>\n//             </CardBody>\n//           </Card>\n//         </GridItem>\n//       </GridContainer>\n\n//       <Dialog\n//         open={openDialog}\n//         onClose={() => setOpenDialog(false)}\n//         fullWidth\n//         maxWidth=\"sm\"\n//       >\n//         <DialogTitle>Assign Leads to Employee</DialogTitle>\n//         <DialogContent>\n//           <p>You have selected {selectedLeads.length} leads.</p>\n//           <FormControl fullWidth>\n//             <InputLabel>Select Employee</InputLabel>\n//             <Select\n//               value={selectedEmployeeId}\n//               onChange={(e) => setSelectedEmployeeId(e.target.value)}\n//             >\n//               {employees.map((emp) => (\n//                 <MenuItem key={emp.id} value={emp.id}>\n//                   {emp.firstName} {emp.lastName}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\n//             Cancel\n//           </Button>\n//           <Button\n//             onClick={handleAssignLeads}\n//             color=\"primary\"\n//             disabled={!selectedEmployeeId}\n//           >\n//             Submit\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  MenuItem,\n  Select,\n  Table as MuiTable,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\n\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\nimport {\n  fetchAllEmployeesoFaManager,\n  assignLeadsToEmployee,\n  fetchLeadsForManager,\n} from \"views/Apis/AfterLogin\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function GetLeadsManagerView() {\n  const classes = useStyles();\n  const managerId = sessionStorage.getItem(\"userId\");\n\n  const [leads, setLeads] = useState([]);\n  const [selectedLeads, setSelectedLeads] = useState([]);\n  const [page, setPage] = useState(0);\n  const [size, setSize] = useState(10);\n  const [totalPages, setTotalPages] = useState(0);\n\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const [filterType, setFilterType] = useState(\"\");\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n  const fetchLeads = async () => {\n    try {\n      let assignedOnly = false;\n      let unassignedOnly = false;\n      let userId = \"\";\n\n      if (filterType === \"assigned\") assignedOnly = true;\n      else if (filterType === \"unassigned\") unassignedOnly = true;\n      else if (filterType === \"employee\") userId = selectedUserId;\n\n      const res = await fetchLeadsForManager({\n        page,\n        size,\n        managerId,\n        assignedOnly,\n        unassignedOnly,\n        userId,\n      });\n\n      if (res?.leads) {\n        setLeads(res.leads);\n        setTotalPages(res.totalPages);\n      }\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error.message);\n    }\n  };\n\n  const fetchEmployees = async () => {\n    try {\n      const allUsers = await fetchAllEmployeesoFaManager();\n      const filteredEmployees = allUsers.filter(\n        (u) => u.userType === \"employee\" && u.managerId === managerId\n      );\n      setEmployees(filteredEmployees);\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchLeads();\n    fetchEmployees();\n  }, [page, size]);\n\n  useEffect(() => {\n    fetchLeads();\n  }, [page, size, filterType, selectedUserId]);\n\n  const handleAssignLeads = async () => {\n    if (!selectedLeads.length || !selectedEmployeeId) {\n      alert(\"Please select leads and an employee.\");\n      return;\n    }\n\n    try {\n      const res = await assignLeadsToEmployee({\n        leadIds: selectedLeads,\n        employeeId: selectedEmployeeId,\n      });\n\n      if (res.status) {\n        alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\n        setSelectedLeads([]);\n        setSelectedEmployeeId(\"\");\n        setOpenDialog(false);\n        fetchLeads();\n      } else {\n        alert(res.message || \"Failed to assign leads.\");\n      }\n    } catch (error) {\n      console.error(\"Assignment failed:\", error.message);\n    }\n  };\n\n  return (\n    <div>\n      {selectedLeads.length > 0 && (\n        <div style={{ textAlign: \"right\", marginBottom: \"10px\" }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setOpenDialog(true)}\n          >\n            Assign Selected Leads To Employee\n          </Button>\n        </div>\n      )}\n\n      <GridContainer>\n        <GridItem xs={12}>\n          <Card>\n            <CardBody>\n              <GridContainer spacing={3}>\n                <GridItem xs={12} sm={6} md={3}>\n                  <FormControl fullWidth>\n                    <InputLabel>Filter by Employee</InputLabel>\n                    <Select\n                      value={filterType === \"employee\" ? selectedUserId : \"\"}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        if (value === \"\") {\n                          setFilterType(\"\");\n                          setSelectedUserId(\"\");\n                        } else {\n                          setFilterType(\"employee\");\n                          setSelectedUserId(value);\n                        }\n                        setPage(0);\n                      }}\n                    >\n                      <MenuItem value=\"\">All Employees</MenuItem>\n                      {employees.map((emp) => (\n                        <MenuItem key={emp.id} value={emp.id}>\n                          {emp.firstName} {emp.lastName}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </GridItem>\n\n                <GridItem xs={12} sm={6} md={3}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={filterType === \"assigned\"}\n                        onChange={() => {\n                          setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\n                          setSelectedUserId(\"\");\n                          setPage(0);\n                        }}\n                      />\n                    }\n                    label=\"Assigned Only\"\n                  />\n                </GridItem>\n\n                <GridItem xs={12} sm={6} md={3}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={filterType === \"unassigned\"}\n                        onChange={() => {\n                          setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\n                          setSelectedUserId(\"\");\n                          setPage(0);\n                        }}\n                      />\n                    }\n                    label=\"Unassigned Only\"\n                  />\n                </GridItem>\n\n                <GridItem xs={12} sm={6} md={3}>\n                  <FormControl fullWidth>\n                    <InputLabel>Page Size</InputLabel>\n                    <Select\n                      value={size}\n                      onChange={(e) => {\n                        setSize(e.target.value);\n                        setPage(0);\n                      }}\n                    >\n                      <MenuItem value={20}>20</MenuItem>\n                      <MenuItem value={50}>50</MenuItem>\n                      <MenuItem value={100}>100</MenuItem>\n                    </Select>\n                  </FormControl>\n                </GridItem>\n              </GridContainer>\n            </CardBody>\n          </Card>\n\n          <Card>\n            <CardHeader color=\"info\">\n              <h4 className={classes.cardTitleWhite}>My Assigned Leads</h4>\n              <p className={classes.cardCategoryWhite}>\n                Page {page + 1} of {totalPages}\n              </p>\n            </CardHeader>\n            <CardBody>\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <Button disabled={page === 0} onClick={() => setPage(page - 1)}>\n                  Previous\n                </Button>\n                <Button\n                  disabled={page >= totalPages - 1}\n                  onClick={() => setPage(page + 1)}\n                >\n                  Next\n                </Button>\n              </div>\n\n              <div style={{ overflowX: \"auto\" }}>\n                <MuiTable>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={\n                            selectedLeads.length > 0 &&\n                            selectedLeads.length ===\n                              leads.filter((l) => l.userId === null).length\n                          }\n                          indeterminate={\n                            selectedLeads.length > 0 &&\n                            selectedLeads.length <\n                              leads.filter((l) => l.userId === null).length\n                          }\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedLeads(\n                                leads.filter((l) => l.userId === null).map((l) => l.id)\n                              );\n                            } else {\n                              setSelectedLeads([]);\n                            }\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell>Name</TableCell>\n                      <TableCell>Email</TableCell>\n                      <TableCell>Phone</TableCell>\n                      <TableCell>Address</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Source</TableCell>\n                      <TableCell>Created At</TableCell>\n                      <TableCell>Assigned To</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {leads.map((lead) => {\n                      const isChecked = selectedLeads.includes(lead.id);\n                      return (\n                        <TableRow key={lead.id}>\n                          <TableCell padding=\"checkbox\">\n                            {lead.userId === null ? (\n                              <Checkbox\n                                checked={isChecked}\n                                onChange={() => {\n                                  if (isChecked) {\n                                    setSelectedLeads(\n                                      selectedLeads.filter((id) => id !== lead.id)\n                                    );\n                                  } else {\n                                    setSelectedLeads([...selectedLeads, lead.id]);\n                                  }\n                                }}\n                              />\n                            ) : null}\n                          </TableCell>\n                          <TableCell>{lead.name}</TableCell>\n                          <TableCell>{lead.email}</TableCell>\n                          <TableCell>{lead.phoneNumber}</TableCell>\n                          <TableCell>{lead.address}</TableCell>\n                          <TableCell>{lead.leadStatus}</TableCell>\n                          <TableCell>{lead.source}</TableCell>\n                          <TableCell>\n                            {new Date(lead.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell>{lead.userName || \"-\"}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </MuiTable>\n              </div>\n            </CardBody>\n          </Card>\n        </GridItem>\n      </GridContainer>\n\n      <Dialog\n        open={openDialog}\n        onClose={() => setOpenDialog(false)}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <DialogTitle>Assign Leads to Employee</DialogTitle>\n        <DialogContent>\n          <p>You have selected {selectedLeads.length} leads.</p>\n          <FormControl fullWidth>\n            <InputLabel>Select Employee</InputLabel>\n            <Select\n              value={selectedEmployeeId}\n              onChange={(e) => setSelectedEmployeeId(e.target.value)}\n            >\n              {employees.map((emp) => (\n                <MenuItem key={emp.id} value={emp.id}>\n                  {emp.firstName} {emp.lastName}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={handleAssignLeads}\n            color=\"primary\"\n            disabled={!selectedEmployeeId}\n          >\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}