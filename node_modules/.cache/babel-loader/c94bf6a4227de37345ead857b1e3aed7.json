{"ast":null,"code":"import axios from 'axios';\nconst environment = 'local'; // Change to 'local' if needed\n\nconst BASE_URL = environment === 'local' ? 'https://asoft.click/api/incometax-service/' : 'http://ec2-43-204-235-24.ap-south-1.compute.amazonaws.com:8686/api/incometax-service/';\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\nconst getToken = () => {\n  return localStorage.getItem('token') || null;\n};\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const loginUser = async (email, password) => {\n  const data = {\n    \"email\": email,\n    \"password\": password\n  };\n  console.log(\"Login Data:\", data);\n  try {\n    const response = await api({\n      method: 'POST',\n      url: 'auth/userEmailPassword',\n      data\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.message : error.message);\n  }\n};","map":{"version":3,"names":["axios","environment","BASE_URL","api","create","baseURL","headers","withCredentials","getToken","localStorage","getItem","interceptors","request","use","config","token","loginUser","email","password","data","console","log","response","method","url","error","Error","message"],"sources":["/Users/anjanyelle/Desktop/copy/tax_service/src/views/Apis/BeforeLogin.js"],"sourcesContent":["import axios from 'axios'\n\nconst environment = 'local' // Change to 'local' if needed\n\nconst BASE_URL =\n  environment === 'local'\n    ? 'https://asoft.click/api/incometax-service/'\n    : 'http://ec2-43-204-235-24.ap-south-1.compute.amazonaws.com:8686/api/incometax-service/'\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n      withCredentials: true,\n})\n\n\nconst getToken = () => {\n  return localStorage.getItem('token') || null\n}\n\napi.interceptors.request.use((config) => {\n  const token = getToken()\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`\n  }\n  return config\n})\n\n\nexport const loginUser = async (email, password) => {\nconst data = {\"email\":email,\"password\":password}\nconsole.log(\"Login Data:\", data)\n  try {\n    const response = await api({\n      method: 'POST',\n      url: 'auth/userEmailPassword',\n      data,\n    });\n    return response.data\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.message : error.message)\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAG,OAAO,EAAC;;AAE5B,MAAMC,QAAQ,GACZD,WAAW,KAAK,OAAO,GACnB,4CAA4C,GAC5C,uFAAuF;AAE7F,MAAME,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACGC,eAAe,EAAE;AACvB,CAAC,CAAC;AAGF,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;AAC9C,CAAC;AAEDP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,MAAM,CAACR,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAGF,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACpD,MAAMC,IAAI,GAAG;IAAC,OAAO,EAACF,KAAK;IAAC,UAAU,EAACC;EAAQ,CAAC;EAChDE,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,IAAI,CAAC;EAC9B,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAAC;MACzBoB,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,wBAAwB;MAC7BL;IACF,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACH,IAAI;EACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACH,IAAI,CAACQ,OAAO,GAAGF,KAAK,CAACE,OAAO,CAAC;EAC/E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}