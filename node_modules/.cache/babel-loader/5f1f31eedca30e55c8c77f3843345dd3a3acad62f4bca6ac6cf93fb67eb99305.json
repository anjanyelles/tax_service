{"ast":null,"code":"var _jsxFileName = \"/Users/anjanyelle/Desktop/tax/taxserves_react_crm_dashboard/src/components/Leads/GetLeadsManagerView.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   Button,\n//   Checkbox,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n//   FormControl,\n//   FormControlLabel,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   Table as MuiTable,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n// } from \"@material-ui/core\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n\n// import GridItem from \"components/Grid/GridItem.js\";\n// import GridContainer from \"components/Grid/GridContainer.js\";\n// import Card from \"components/Card/Card.js\";\n// import CardHeader from \"components/Card/CardHeader.js\";\n// import CardBody from \"components/Card/CardBody.js\";\n\n// import styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\n// import {\n//   fetchAllEmployeesoFaManager,\n//   assignLeadsToEmployee,\n//   fetchLeadsForManager,\n// } from \"views/Apis/AfterLogin\";\n\n// const useStyles = makeStyles(styles);\n\n// export default function GetLeadsManagerView() {\n//   const classes = useStyles();\n//   const managerId = sessionStorage.getItem(\"userId\");\n\n//   const [leads, setLeads] = useState([]);\n//   const [selectedLeads, setSelectedLeads] = useState([]);\n//   const [page, setPage] = useState(0);\n//   const [size, setSize] = useState(10);\n//   const [totalPages, setTotalPages] = useState(0);\n\n//   const [employees, setEmployees] = useState([]);\n//   const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\n//   const [openDialog, setOpenDialog] = useState(false);\n\n//   const [filterType, setFilterType] = useState(\"\"); // \"assigned\", \"unassigned\", \"employee\"\n//   const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n//   const fetchLeads = async () => {\n//     try {\n//       let assignedOnly = false;\n//       let unassignedOnly = false;\n//       let userId = \"\";\n\n//       if (filterType === \"assigned\") assignedOnly = true;\n//       else if (filterType === \"unassigned\") unassignedOnly = true;\n//       else if (filterType === \"employee\") userId = selectedUserId;\n\n//       const res = await fetchLeadsForManager({\n//         page,\n//         size,\n//         managerId,\n//         assignedOnly,\n//         unassignedOnly,\n//         userId,\n//       });\n\n//       if (res?.leads) {\n//         setLeads(res.leads);\n//         setTotalPages(res.totalPages);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching leads:\", error.message);\n//     }\n//   };\n\n//   const fetchEmployees = async () => {\n//     try {\n//       const allUsers = await fetchAllEmployeesoFaManager();\n//       const filteredEmployees = allUsers.filter(\n//         (u) => u.userType === \"employee\" && u.managerId === managerId\n//       );\n//       setEmployees(filteredEmployees);\n//     } catch (error) {\n//       console.error(\"Failed to fetch employees:\", error.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchLeads();\n//     fetchEmployees();\n//   }, [page, size]);\n\n//   useEffect(() => {\n//     fetchLeads();\n//   }, [page, size, filterType, selectedUserId]);\n\n//   const handleAssignLeads = async () => {\n//     if (!selectedLeads.length || !selectedEmployeeId) {\n//       alert(\"Please select leads and an employee.\");\n//       return;\n//     }\n\n//     try {\n//       const res = await assignLeadsToEmployee({\n//         leadIds: selectedLeads,\n//         employeeId: selectedEmployeeId,\n//       });\n\n//       if (res.status) {\n//         alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\n//         setSelectedLeads([]);\n//         setSelectedEmployeeId(\"\");\n//         setOpenDialog(false);\n//         fetchLeads();\n//       } else {\n//         alert(res.message || \"Failed to assign leads.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Assignment failed:\", error.message);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {selectedLeads.length > 0 && (\n//         <div style={{ textAlign: \"right\", marginBottom: \"10px\" }}>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             onClick={() => setOpenDialog(true)}\n//           >\n//             Assign Selected Leads To Employee\n//           </Button>\n//         </div>\n//       )}\n\n//       <GridContainer>\n//         <GridItem xs={12}>\n//           <Card>\n//             <CardBody>\n//               <GridContainer spacing={3}>\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControl fullWidth>\n//                     <InputLabel>Filter by Employee</InputLabel>\n//                     <Select\n//                       value={filterType === \"employee\" ? selectedUserId : \"\"}\n//                       onChange={(e) => {\n//                         const value = e.target.value;\n//                         if (value === \"\") {\n//                           setFilterType(\"\");\n//                           setSelectedUserId(\"\");\n//                         } else {\n//                           setFilterType(\"employee\");\n//                           setSelectedUserId(value);\n//                         }\n//                         setPage(0);\n//                       }}\n//                     >\n//                       <MenuItem value=\"\">All Employees</MenuItem>\n//                       {employees.map((emp) => (\n//                         <MenuItem key={emp.id} value={emp.id}>\n//                           {emp.firstName} {emp.lastName}\n//                         </MenuItem>\n//                       ))}\n//                     </Select>\n//                   </FormControl>\n//                 </GridItem>\n\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={filterType === \"assigned\"}\n//                         onChange={() => {\n//                           setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\n//                           setSelectedUserId(\"\");\n//                           setPage(0);\n//                         }}\n//                       />\n//                     }\n//                     label=\"Assigned Only\"\n//                   />\n//                 </GridItem>\n\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={filterType === \"unassigned\"}\n//                         onChange={() => {\n//                           setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\n//                           setSelectedUserId(\"\");\n//                           setPage(0);\n//                         }}\n//                       />\n//                     }\n//                     label=\"Unassigned Only\"\n//                   />\n//                 </GridItem>\n\n//                 <GridItem xs={12} sm={6} md={3}>\n//                   <FormControl fullWidth>\n//                     <InputLabel>Page Size</InputLabel>\n//                     <Select\n//                       value={size}\n//                       onChange={(e) => {\n//                         setSize(e.target.value);\n//                         setPage(0);\n//                       }}\n//                     >\n//                       <MenuItem value={20}>20</MenuItem>\n//                       <MenuItem value={50}>50</MenuItem>\n//                       <MenuItem value={100}>100</MenuItem>\n//                     </Select>\n//                   </FormControl>\n//                 </GridItem>\n//               </GridContainer>\n//             </CardBody>\n//           </Card>\n\n//           <Card>\n//             <CardHeader color=\"info\">\n//               <h4 className={classes.cardTitleWhite}>My Assigned Leads</h4>\n//               <p className={classes.cardCategoryWhite}>\n//                 Page {page + 1} of {totalPages}\n//               </p>\n//             </CardHeader>\n//             <CardBody>\n//               <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n//                 <Button disabled={page === 0} onClick={() => setPage(page - 1)}>\n//                   Previous\n//                 </Button>\n//                 <Button\n//                   disabled={page >= totalPages - 1}\n//                   onClick={() => setPage(page + 1)}\n//                 >\n//                   Next\n//                 </Button>\n//               </div>\n\n//               <div style={{ overflowX: \"auto\" }}>\n//                 <MuiTable>\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={\n//                             selectedLeads.length > 0 &&\n//                             selectedLeads.length === leads.length\n//                           }\n//                           indeterminate={\n//                             selectedLeads.length > 0 &&\n//                             selectedLeads.length < leads.length\n//                           }\n//                           onChange={(e) => {\n//                             if (e.target.checked) {\n//                               setSelectedLeads(leads.map((l) => l.id));\n//                             } else {\n//                               setSelectedLeads([]);\n//                             }\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell>Name</TableCell>\n//                       <TableCell>Email</TableCell>\n//                       <TableCell>Phone</TableCell>\n//                       <TableCell>Address</TableCell>\n//                       <TableCell>Status</TableCell>\n//                       <TableCell>Source</TableCell>\n//                       <TableCell>Created At</TableCell>\n//                       <TableCell>Assigned To</TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                     {leads.map((lead) => {\n//                       const isChecked = selectedLeads.includes(lead.id);\n//                       return (\n//                         <TableRow key={lead.id}>\n//                           <TableCell padding=\"checkbox\">\n//                             <Checkbox\n//                               checked={isChecked}\n//                               onChange={() => {\n//                                 if (isChecked) {\n//                                   setSelectedLeads(\n//                                     selectedLeads.filter((id) => id !== lead.id)\n//                                   );\n//                                 } else {\n//                                   setSelectedLeads([...selectedLeads, lead.id]);\n//                                 }\n//                               }}\n//                             />\n//                           </TableCell>\n//                           <TableCell>{lead.name}</TableCell>\n//                           <TableCell>{lead.email}</TableCell>\n//                           <TableCell>{lead.phoneNumber}</TableCell>\n//                           <TableCell>{lead.address}</TableCell>\n//                           <TableCell>{lead.leadStatus}</TableCell>\n//                           <TableCell>{lead.source}</TableCell>\n//                           <TableCell>\n//                             {new Date(lead.createdAt).toLocaleDateString()}\n//                           </TableCell>\n//                           <TableCell>{lead.userName || \"-\"}</TableCell>\n//                         </TableRow>\n//                       );\n//                     })}\n//                   </TableBody>\n//                 </MuiTable>\n//               </div>\n//             </CardBody>\n//           </Card>\n//         </GridItem>\n//       </GridContainer>\n\n//       <Dialog\n//         open={openDialog}\n//         onClose={() => setOpenDialog(false)}\n//         fullWidth\n//         maxWidth=\"sm\"\n//       >\n//         <DialogTitle>Assign Leads to Employee</DialogTitle>\n//         <DialogContent>\n//           <p>You have selected {selectedLeads.length} leads.</p>\n//           <FormControl fullWidth>\n//             <InputLabel>Select Employee</InputLabel>\n//             <Select\n//               value={selectedEmployeeId}\n//               onChange={(e) => setSelectedEmployeeId(e.target.value)}\n//             >\n//               {employees.map((emp) => (\n//                 <MenuItem key={emp.id} value={emp.id}>\n//                   {emp.firstName} {emp.lastName}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\n//             Cancel\n//           </Button>\n//           <Button\n//             onClick={handleAssignLeads}\n//             color=\"primary\"\n//             disabled={!selectedEmployeeId}\n//           >\n//             Submit\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormControlLabel, InputLabel, MenuItem, Select, Table as MuiTable, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\nimport { fetchAllEmployeesoFaManager, assignLeadsToEmployee, fetchLeadsForManager } from \"views/Apis/AfterLogin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(styles);\nexport default function GetLeadsManagerView() {\n  _s();\n  const classes = useStyles();\n  const managerId = sessionStorage.getItem(\"userId\");\n  const [leads, setLeads] = useState([]);\n  const [selectedLeads, setSelectedLeads] = useState([]);\n  const [page, setPage] = useState(0);\n  const [size, setSize] = useState(10);\n  const [totalPages, setTotalPages] = useState(0);\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\n  const [openDialog, setOpenDialog] = useState(false);\n  const [filterType, setFilterType] = useState(\"\");\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const fetchLeads = async () => {\n    try {\n      let assignedOnly = false;\n      let unassignedOnly = false;\n      let userId = \"\";\n      if (filterType === \"assigned\") assignedOnly = true;else if (filterType === \"unassigned\") unassignedOnly = true;else if (filterType === \"employee\") userId = selectedUserId;\n      const res = await fetchLeadsForManager({\n        page,\n        size,\n        managerId,\n        assignedOnly,\n        unassignedOnly,\n        userId\n      });\n      if (res !== null && res !== void 0 && res.leads) {\n        setLeads(res.leads);\n        setTotalPages(res.totalPages);\n      }\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error.message);\n    }\n  };\n  const fetchEmployees = async () => {\n    try {\n      const allUsers = await fetchAllEmployeesoFaManager();\n      const filteredEmployees = allUsers.filter(u => u.userType === \"employee\" && u.managerId === managerId);\n      setEmployees(filteredEmployees);\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error.message);\n    }\n  };\n  useEffect(() => {\n    fetchLeads();\n    fetchEmployees();\n  }, [page, size]);\n  useEffect(() => {\n    fetchLeads();\n  }, [page, size, filterType, selectedUserId]);\n  const handleAssignLeads = async () => {\n    if (!selectedLeads.length || !selectedEmployeeId) {\n      alert(\"Please select leads and an employee.\");\n      return;\n    }\n    try {\n      const res = await assignLeadsToEmployee({\n        leadIds: selectedLeads,\n        employeeId: selectedEmployeeId\n      });\n      if (res.status) {\n        alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\n        setSelectedLeads([]);\n        setSelectedEmployeeId(\"\");\n        setOpenDialog(false);\n        fetchLeads();\n      } else {\n        alert(res.message || \"Failed to assign leads.\");\n      }\n    } catch (error) {\n      console.error(\"Assignment failed:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [selectedLeads.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\",\n        marginBottom: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setOpenDialog(true),\n        children: \"Assign Selected Leads To Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GridContainer, {\n      children: /*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardBody, {\n            children: /*#__PURE__*/_jsxDEV(GridContainer, {\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                sm: 6,\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormControl, {\n                  fullWidth: true,\n                  children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                    children: \"Filter by Employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 517,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    value: filterType === \"employee\" ? selectedUserId : \"\",\n                    onChange: e => {\n                      const value = e.target.value;\n                      if (value === \"\") {\n                        setFilterType(\"\");\n                        setSelectedUserId(\"\");\n                      } else {\n                        setFilterType(\"employee\");\n                        setSelectedUserId(value);\n                      }\n                      setPage(0);\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: \"\",\n                      children: \"All Employees\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 532,\n                      columnNumber: 23\n                    }, this), employees.map(emp => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: emp.id,\n                      children: [emp.firstName, \" \", emp.lastName]\n                    }, emp.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 534,\n                      columnNumber: 25\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 518,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 516,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                sm: 6,\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: filterType === \"assigned\",\n                    onChange: () => {\n                      setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\n                      setSelectedUserId(\"\");\n                      setPage(0);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 545,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Assigned Only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                sm: 6,\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: filterType === \"unassigned\",\n                    onChange: () => {\n                      setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\n                      setSelectedUserId(\"\");\n                      setPage(0);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 561,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Unassigned Only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                sm: 6,\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(FormControl, {\n                  fullWidth: true,\n                  children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                    children: \"Page Size\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 576,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    value: size,\n                    onChange: e => {\n                      setSize(e.target.value);\n                      setPage(0);\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: 20,\n                      children: \"20\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 584,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: 50,\n                      children: \"50\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 585,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: 100,\n                      children: \"100\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 586,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 577,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 575,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            color: \"info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: classes.cardTitleWhite,\n              children: \"My Assigned Leads\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.cardCategoryWhite,\n              children: [\"Page \", page + 1, \" of \", totalPages]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                disabled: page === 0,\n                onClick: () => setPage(page - 1),\n                children: \"Previous\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: page >= totalPages - 1,\n                onClick: () => setPage(page + 1),\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                overflowX: \"auto\"\n              },\n              children: /*#__PURE__*/_jsxDEV(MuiTable, {\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      padding: \"checkbox\",\n                      children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                        checked: selectedLeads.length > 0 && selectedLeads.length === leads.filter(l => l.userId === null).length,\n                        indeterminate: selectedLeads.length > 0 && selectedLeads.length < leads.filter(l => l.userId === null).length,\n                        onChange: e => {\n                          if (e.target.checked) {\n                            setSelectedLeads(leads.filter(l => l.userId === null).map(l => l.id));\n                          } else {\n                            setSelectedLeads([]);\n                          }\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 619,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 618,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 641,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 642,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Phone\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 643,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Address\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 644,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 645,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Source\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 646,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Created At\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 647,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: \"Assigned To\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 648,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                  children: leads.map(lead => {\n                    const isChecked = selectedLeads.includes(lead.id);\n                    return /*#__PURE__*/_jsxDEV(TableRow, {\n                      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                        padding: \"checkbox\",\n                        children: lead.userId === null ? /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: isChecked,\n                          onChange: () => {\n                            if (isChecked) {\n                              setSelectedLeads(selectedLeads.filter(id => id !== lead.id));\n                            } else {\n                              setSelectedLeads([...selectedLeads, lead.id]);\n                            }\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 658,\n                          columnNumber: 31\n                        }, this) : null\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 656,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 672,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.email\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 673,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.phoneNumber\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 674,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.address\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 675,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.leadStatus\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 676,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.source\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 677,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: new Date(lead.createdAt).toLocaleDateString()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 678,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        children: lead.userName || \"-\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 681,\n                        columnNumber: 27\n                      }, this)]\n                    }, lead.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 655,\n                      columnNumber: 25\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: () => setOpenDialog(false),\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Assign Leads to Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You have selected \", selectedLeads.length, \" leads.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedEmployeeId,\n            onChange: e => setSelectedEmployeeId(e.target.value),\n            children: employees.map(emp => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: emp.id,\n              children: [emp.firstName, \" \", emp.lastName]\n            }, emp.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDialog(false),\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAssignLeads,\n          color: \"primary\",\n          disabled: !selectedEmployeeId,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 5\n  }, this);\n}\n_s(GetLeadsManagerView, \"7FC7VsKAHJVWl547jwfVocv4HNg=\", false, function () {\n  return [useStyles];\n});\n_c = GetLeadsManagerView;\nvar _c;\n$RefreshReg$(_c, \"GetLeadsManagerView\");","map":{"version":3,"names":["React","useEffect","useState","Button","Checkbox","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","FormControlLabel","InputLabel","MenuItem","Select","Table","MuiTable","TableBody","TableCell","TableHead","TableRow","makeStyles","GridItem","GridContainer","Card","CardHeader","CardBody","styles","fetchAllEmployeesoFaManager","assignLeadsToEmployee","fetchLeadsForManager","jsxDEV","_jsxDEV","useStyles","GetLeadsManagerView","_s","classes","managerId","sessionStorage","getItem","leads","setLeads","selectedLeads","setSelectedLeads","page","setPage","size","setSize","totalPages","setTotalPages","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","openDialog","setOpenDialog","filterType","setFilterType","selectedUserId","setSelectedUserId","fetchLeads","assignedOnly","unassignedOnly","userId","res","error","console","message","fetchEmployees","allUsers","filteredEmployees","filter","u","userType","handleAssignLeads","length","alert","leadIds","employeeId","status","assignedLeadCount","children","style","textAlign","marginBottom","variant","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber","xs","spacing","sm","md","fullWidth","value","onChange","e","target","map","emp","id","firstName","lastName","control","checked","label","className","cardTitleWhite","cardCategoryWhite","display","justifyContent","disabled","overflowX","padding","l","indeterminate","lead","isChecked","includes","name","email","phoneNumber","address","leadStatus","source","Date","createdAt","toLocaleDateString","userName","open","onClose","maxWidth","_c","$RefreshReg$"],"sources":["/Users/anjanyelle/Desktop/tax/taxserves_react_crm_dashboard/src/components/Leads/GetLeadsManagerView.js"],"sourcesContent":["\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   Button,\r\n//   Checkbox,\r\n//   Dialog,\r\n//   DialogActions,\r\n//   DialogContent,\r\n//   DialogTitle,\r\n//   FormControl,\r\n//   FormControlLabel,\r\n//   InputLabel,\r\n//   MenuItem,\r\n//   Select,\r\n//   Table as MuiTable,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableRow,\r\n// } from \"@material-ui/core\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// import GridItem from \"components/Grid/GridItem.js\";\r\n// import GridContainer from \"components/Grid/GridContainer.js\";\r\n// import Card from \"components/Card/Card.js\";\r\n// import CardHeader from \"components/Card/CardHeader.js\";\r\n// import CardBody from \"components/Card/CardBody.js\";\r\n\r\n// import styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\r\n// import {\r\n//   fetchAllEmployeesoFaManager,\r\n//   assignLeadsToEmployee,\r\n//   fetchLeadsForManager,\r\n// } from \"views/Apis/AfterLogin\";\r\n\r\n// const useStyles = makeStyles(styles);\r\n\r\n// export default function GetLeadsManagerView() {\r\n//   const classes = useStyles();\r\n//   const managerId = sessionStorage.getItem(\"userId\");\r\n\r\n//   const [leads, setLeads] = useState([]);\r\n//   const [selectedLeads, setSelectedLeads] = useState([]);\r\n//   const [page, setPage] = useState(0);\r\n//   const [size, setSize] = useState(10);\r\n//   const [totalPages, setTotalPages] = useState(0);\r\n\r\n//   const [employees, setEmployees] = useState([]);\r\n//   const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\r\n//   const [openDialog, setOpenDialog] = useState(false);\r\n\r\n//   const [filterType, setFilterType] = useState(\"\"); // \"assigned\", \"unassigned\", \"employee\"\r\n//   const [selectedUserId, setSelectedUserId] = useState(\"\");\r\n\r\n//   const fetchLeads = async () => {\r\n//     try {\r\n//       let assignedOnly = false;\r\n//       let unassignedOnly = false;\r\n//       let userId = \"\";\r\n\r\n//       if (filterType === \"assigned\") assignedOnly = true;\r\n//       else if (filterType === \"unassigned\") unassignedOnly = true;\r\n//       else if (filterType === \"employee\") userId = selectedUserId;\r\n\r\n//       const res = await fetchLeadsForManager({\r\n//         page,\r\n//         size,\r\n//         managerId,\r\n//         assignedOnly,\r\n//         unassignedOnly,\r\n//         userId,\r\n//       });\r\n\r\n//       if (res?.leads) {\r\n//         setLeads(res.leads);\r\n//         setTotalPages(res.totalPages);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching leads:\", error.message);\r\n//     }\r\n//   };\r\n\r\n//   const fetchEmployees = async () => {\r\n//     try {\r\n//       const allUsers = await fetchAllEmployeesoFaManager();\r\n//       const filteredEmployees = allUsers.filter(\r\n//         (u) => u.userType === \"employee\" && u.managerId === managerId\r\n//       );\r\n//       setEmployees(filteredEmployees);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to fetch employees:\", error.message);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchLeads();\r\n//     fetchEmployees();\r\n//   }, [page, size]);\r\n\r\n//   useEffect(() => {\r\n//     fetchLeads();\r\n//   }, [page, size, filterType, selectedUserId]);\r\n\r\n//   const handleAssignLeads = async () => {\r\n//     if (!selectedLeads.length || !selectedEmployeeId) {\r\n//       alert(\"Please select leads and an employee.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const res = await assignLeadsToEmployee({\r\n//         leadIds: selectedLeads,\r\n//         employeeId: selectedEmployeeId,\r\n//       });\r\n\r\n//       if (res.status) {\r\n//         alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\r\n//         setSelectedLeads([]);\r\n//         setSelectedEmployeeId(\"\");\r\n//         setOpenDialog(false);\r\n//         fetchLeads();\r\n//       } else {\r\n//         alert(res.message || \"Failed to assign leads.\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Assignment failed:\", error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {selectedLeads.length > 0 && (\r\n//         <div style={{ textAlign: \"right\", marginBottom: \"10px\" }}>\r\n//           <Button\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//             onClick={() => setOpenDialog(true)}\r\n//           >\r\n//             Assign Selected Leads To Employee\r\n//           </Button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <GridContainer>\r\n//         <GridItem xs={12}>\r\n//           <Card>\r\n//             <CardBody>\r\n//               <GridContainer spacing={3}>\r\n//                 <GridItem xs={12} sm={6} md={3}>\r\n//                   <FormControl fullWidth>\r\n//                     <InputLabel>Filter by Employee</InputLabel>\r\n//                     <Select\r\n//                       value={filterType === \"employee\" ? selectedUserId : \"\"}\r\n//                       onChange={(e) => {\r\n//                         const value = e.target.value;\r\n//                         if (value === \"\") {\r\n//                           setFilterType(\"\");\r\n//                           setSelectedUserId(\"\");\r\n//                         } else {\r\n//                           setFilterType(\"employee\");\r\n//                           setSelectedUserId(value);\r\n//                         }\r\n//                         setPage(0);\r\n//                       }}\r\n//                     >\r\n//                       <MenuItem value=\"\">All Employees</MenuItem>\r\n//                       {employees.map((emp) => (\r\n//                         <MenuItem key={emp.id} value={emp.id}>\r\n//                           {emp.firstName} {emp.lastName}\r\n//                         </MenuItem>\r\n//                       ))}\r\n//                     </Select>\r\n//                   </FormControl>\r\n//                 </GridItem>\r\n\r\n//                 <GridItem xs={12} sm={6} md={3}>\r\n//                   <FormControlLabel\r\n//                     control={\r\n//                       <Checkbox\r\n//                         checked={filterType === \"assigned\"}\r\n//                         onChange={() => {\r\n//                           setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\r\n//                           setSelectedUserId(\"\");\r\n//                           setPage(0);\r\n//                         }}\r\n//                       />\r\n//                     }\r\n//                     label=\"Assigned Only\"\r\n//                   />\r\n//                 </GridItem>\r\n\r\n//                 <GridItem xs={12} sm={6} md={3}>\r\n//                   <FormControlLabel\r\n//                     control={\r\n//                       <Checkbox\r\n//                         checked={filterType === \"unassigned\"}\r\n//                         onChange={() => {\r\n//                           setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\r\n//                           setSelectedUserId(\"\");\r\n//                           setPage(0);\r\n//                         }}\r\n//                       />\r\n//                     }\r\n//                     label=\"Unassigned Only\"\r\n//                   />\r\n//                 </GridItem>\r\n\r\n//                 <GridItem xs={12} sm={6} md={3}>\r\n//                   <FormControl fullWidth>\r\n//                     <InputLabel>Page Size</InputLabel>\r\n//                     <Select\r\n//                       value={size}\r\n//                       onChange={(e) => {\r\n//                         setSize(e.target.value);\r\n//                         setPage(0);\r\n//                       }}\r\n//                     >\r\n//                       <MenuItem value={20}>20</MenuItem>\r\n//                       <MenuItem value={50}>50</MenuItem>\r\n//                       <MenuItem value={100}>100</MenuItem>\r\n//                     </Select>\r\n//                   </FormControl>\r\n//                 </GridItem>\r\n//               </GridContainer>\r\n//             </CardBody>\r\n//           </Card>\r\n\r\n//           <Card>\r\n//             <CardHeader color=\"info\">\r\n//               <h4 className={classes.cardTitleWhite}>My Assigned Leads</h4>\r\n//               <p className={classes.cardCategoryWhite}>\r\n//                 Page {page + 1} of {totalPages}\r\n//               </p>\r\n//             </CardHeader>\r\n//             <CardBody>\r\n//               <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n//                 <Button disabled={page === 0} onClick={() => setPage(page - 1)}>\r\n//                   Previous\r\n//                 </Button>\r\n//                 <Button\r\n//                   disabled={page >= totalPages - 1}\r\n//                   onClick={() => setPage(page + 1)}\r\n//                 >\r\n//                   Next\r\n//                 </Button>\r\n//               </div>\r\n\r\n//               <div style={{ overflowX: \"auto\" }}>\r\n//                 <MuiTable>\r\n//                   <TableHead>\r\n//                     <TableRow>\r\n//                       <TableCell padding=\"checkbox\">\r\n//                         <Checkbox\r\n//                           checked={\r\n//                             selectedLeads.length > 0 &&\r\n//                             selectedLeads.length === leads.length\r\n//                           }\r\n//                           indeterminate={\r\n//                             selectedLeads.length > 0 &&\r\n//                             selectedLeads.length < leads.length\r\n//                           }\r\n//                           onChange={(e) => {\r\n//                             if (e.target.checked) {\r\n//                               setSelectedLeads(leads.map((l) => l.id));\r\n//                             } else {\r\n//                               setSelectedLeads([]);\r\n//                             }\r\n//                           }}\r\n//                         />\r\n//                       </TableCell>\r\n//                       <TableCell>Name</TableCell>\r\n//                       <TableCell>Email</TableCell>\r\n//                       <TableCell>Phone</TableCell>\r\n//                       <TableCell>Address</TableCell>\r\n//                       <TableCell>Status</TableCell>\r\n//                       <TableCell>Source</TableCell>\r\n//                       <TableCell>Created At</TableCell>\r\n//                       <TableCell>Assigned To</TableCell>\r\n//                     </TableRow>\r\n//                   </TableHead>\r\n//                   <TableBody>\r\n//                     {leads.map((lead) => {\r\n//                       const isChecked = selectedLeads.includes(lead.id);\r\n//                       return (\r\n//                         <TableRow key={lead.id}>\r\n//                           <TableCell padding=\"checkbox\">\r\n//                             <Checkbox\r\n//                               checked={isChecked}\r\n//                               onChange={() => {\r\n//                                 if (isChecked) {\r\n//                                   setSelectedLeads(\r\n//                                     selectedLeads.filter((id) => id !== lead.id)\r\n//                                   );\r\n//                                 } else {\r\n//                                   setSelectedLeads([...selectedLeads, lead.id]);\r\n//                                 }\r\n//                               }}\r\n//                             />\r\n//                           </TableCell>\r\n//                           <TableCell>{lead.name}</TableCell>\r\n//                           <TableCell>{lead.email}</TableCell>\r\n//                           <TableCell>{lead.phoneNumber}</TableCell>\r\n//                           <TableCell>{lead.address}</TableCell>\r\n//                           <TableCell>{lead.leadStatus}</TableCell>\r\n//                           <TableCell>{lead.source}</TableCell>\r\n//                           <TableCell>\r\n//                             {new Date(lead.createdAt).toLocaleDateString()}\r\n//                           </TableCell>\r\n//                           <TableCell>{lead.userName || \"-\"}</TableCell>\r\n//                         </TableRow>\r\n//                       );\r\n//                     })}\r\n//                   </TableBody>\r\n//                 </MuiTable>\r\n//               </div>\r\n//             </CardBody>\r\n//           </Card>\r\n//         </GridItem>\r\n//       </GridContainer>\r\n\r\n//       <Dialog\r\n//         open={openDialog}\r\n//         onClose={() => setOpenDialog(false)}\r\n//         fullWidth\r\n//         maxWidth=\"sm\"\r\n//       >\r\n//         <DialogTitle>Assign Leads to Employee</DialogTitle>\r\n//         <DialogContent>\r\n//           <p>You have selected {selectedLeads.length} leads.</p>\r\n//           <FormControl fullWidth>\r\n//             <InputLabel>Select Employee</InputLabel>\r\n//             <Select\r\n//               value={selectedEmployeeId}\r\n//               onChange={(e) => setSelectedEmployeeId(e.target.value)}\r\n//             >\r\n//               {employees.map((emp) => (\r\n//                 <MenuItem key={emp.id} value={emp.id}>\r\n//                   {emp.firstName} {emp.lastName}\r\n//                 </MenuItem>\r\n//               ))}\r\n//             </Select>\r\n//           </FormControl>\r\n//         </DialogContent>\r\n//         <DialogActions>\r\n//           <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\r\n//             Cancel\r\n//           </Button>\r\n//           <Button\r\n//             onClick={handleAssignLeads}\r\n//             color=\"primary\"\r\n//             disabled={!selectedEmployeeId}\r\n//           >\r\n//             Submit\r\n//           </Button>\r\n//         </DialogActions>\r\n//       </Dialog>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  FormControlLabel,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Table as MuiTable,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport Card from \"components/Card/Card.js\";\r\nimport CardHeader from \"components/Card/CardHeader.js\";\r\nimport CardBody from \"components/Card/CardBody.js\";\r\n\r\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\r\nimport {\r\n  fetchAllEmployeesoFaManager,\r\n  assignLeadsToEmployee,\r\n  fetchLeadsForManager,\r\n} from \"views/Apis/AfterLogin\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function GetLeadsManagerView() {\r\n  const classes = useStyles();\r\n  const managerId = sessionStorage.getItem(\"userId\");\r\n\r\n  const [leads, setLeads] = useState([]);\r\n  const [selectedLeads, setSelectedLeads] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [size, setSize] = useState(10);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n\r\n  const [employees, setEmployees] = useState([]);\r\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const [filterType, setFilterType] = useState(\"\");\r\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\r\n\r\n  const fetchLeads = async () => {\r\n    try {\r\n      let assignedOnly = false;\r\n      let unassignedOnly = false;\r\n      let userId = \"\";\r\n\r\n      if (filterType === \"assigned\") assignedOnly = true;\r\n      else if (filterType === \"unassigned\") unassignedOnly = true;\r\n      else if (filterType === \"employee\") userId = selectedUserId;\r\n\r\n      const res = await fetchLeadsForManager({\r\n        page,\r\n        size,\r\n        managerId,\r\n        assignedOnly,\r\n        unassignedOnly,\r\n        userId,\r\n      });\r\n\r\n      if (res?.leads) {\r\n        setLeads(res.leads);\r\n        setTotalPages(res.totalPages);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching leads:\", error.message);\r\n    }\r\n  };\r\n\r\n  const fetchEmployees = async () => {\r\n    try {\r\n      const allUsers = await fetchAllEmployeesoFaManager();\r\n      const filteredEmployees = allUsers.filter(\r\n        (u) => u.userType === \"employee\" && u.managerId === managerId\r\n      );\r\n      setEmployees(filteredEmployees);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch employees:\", error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLeads();\r\n    fetchEmployees();\r\n  }, [page, size]);\r\n\r\n  useEffect(() => {\r\n    fetchLeads();\r\n  }, [page, size, filterType, selectedUserId]);\r\n\r\n  const handleAssignLeads = async () => {\r\n    if (!selectedLeads.length || !selectedEmployeeId) {\r\n      alert(\"Please select leads and an employee.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await assignLeadsToEmployee({\r\n        leadIds: selectedLeads,\r\n        employeeId: selectedEmployeeId,\r\n      });\r\n\r\n      if (res.status) {\r\n        alert(`${res.message} (${res.assignedLeadCount} leads assigned)`);\r\n        setSelectedLeads([]);\r\n        setSelectedEmployeeId(\"\");\r\n        setOpenDialog(false);\r\n        fetchLeads();\r\n      } else {\r\n        alert(res.message || \"Failed to assign leads.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Assignment failed:\", error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {selectedLeads.length > 0 && (\r\n        <div style={{ textAlign: \"right\", marginBottom: \"10px\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => setOpenDialog(true)}\r\n          >\r\n            Assign Selected Leads To Employee\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      <GridContainer>\r\n        <GridItem xs={12}>\r\n          <Card>\r\n            <CardBody>\r\n              <GridContainer spacing={3}>\r\n                <GridItem xs={12} sm={6} md={3}>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Filter by Employee</InputLabel>\r\n                    <Select\r\n                      value={filterType === \"employee\" ? selectedUserId : \"\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        if (value === \"\") {\r\n                          setFilterType(\"\");\r\n                          setSelectedUserId(\"\");\r\n                        } else {\r\n                          setFilterType(\"employee\");\r\n                          setSelectedUserId(value);\r\n                        }\r\n                        setPage(0);\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"\">All Employees</MenuItem>\r\n                      {employees.map((emp) => (\r\n                        <MenuItem key={emp.id} value={emp.id}>\r\n                          {emp.firstName} {emp.lastName}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </GridItem>\r\n\r\n                <GridItem xs={12} sm={6} md={3}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={filterType === \"assigned\"}\r\n                        onChange={() => {\r\n                          setFilterType(filterType === \"assigned\" ? \"\" : \"assigned\");\r\n                          setSelectedUserId(\"\");\r\n                          setPage(0);\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Assigned Only\"\r\n                  />\r\n                </GridItem>\r\n\r\n                <GridItem xs={12} sm={6} md={3}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={filterType === \"unassigned\"}\r\n                        onChange={() => {\r\n                          setFilterType(filterType === \"unassigned\" ? \"\" : \"unassigned\");\r\n                          setSelectedUserId(\"\");\r\n                          setPage(0);\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Unassigned Only\"\r\n                  />\r\n                </GridItem>\r\n\r\n                <GridItem xs={12} sm={6} md={3}>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Page Size</InputLabel>\r\n                    <Select\r\n                      value={size}\r\n                      onChange={(e) => {\r\n                        setSize(e.target.value);\r\n                        setPage(0);\r\n                      }}\r\n                    >\r\n                      <MenuItem value={20}>20</MenuItem>\r\n                      <MenuItem value={50}>50</MenuItem>\r\n                      <MenuItem value={100}>100</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </GridItem>\r\n              </GridContainer>\r\n            </CardBody>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader color=\"info\">\r\n              <h4 className={classes.cardTitleWhite}>My Assigned Leads</h4>\r\n              <p className={classes.cardCategoryWhite}>\r\n                Page {page + 1} of {totalPages}\r\n              </p>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                <Button disabled={page === 0} onClick={() => setPage(page - 1)}>\r\n                  Previous\r\n                </Button>\r\n                <Button\r\n                  disabled={page >= totalPages - 1}\r\n                  onClick={() => setPage(page + 1)}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n\r\n              <div style={{ overflowX: \"auto\" }}>\r\n                <MuiTable>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={\r\n                            selectedLeads.length > 0 &&\r\n                            selectedLeads.length ===\r\n                              leads.filter((l) => l.userId === null).length\r\n                          }\r\n                          indeterminate={\r\n                            selectedLeads.length > 0 &&\r\n                            selectedLeads.length <\r\n                              leads.filter((l) => l.userId === null).length\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              setSelectedLeads(\r\n                                leads.filter((l) => l.userId === null).map((l) => l.id)\r\n                              );\r\n                            } else {\r\n                              setSelectedLeads([]);\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Phone</TableCell>\r\n                      <TableCell>Address</TableCell>\r\n                      <TableCell>Status</TableCell>\r\n                      <TableCell>Source</TableCell>\r\n                      <TableCell>Created At</TableCell>\r\n                      <TableCell>Assigned To</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {leads.map((lead) => {\r\n                      const isChecked = selectedLeads.includes(lead.id);\r\n                      return (\r\n                        <TableRow key={lead.id}>\r\n                          <TableCell padding=\"checkbox\">\r\n                            {lead.userId === null ? (\r\n                              <Checkbox\r\n                                checked={isChecked}\r\n                                onChange={() => {\r\n                                  if (isChecked) {\r\n                                    setSelectedLeads(\r\n                                      selectedLeads.filter((id) => id !== lead.id)\r\n                                    );\r\n                                  } else {\r\n                                    setSelectedLeads([...selectedLeads, lead.id]);\r\n                                  }\r\n                                }}\r\n                              />\r\n                            ) : null}\r\n                          </TableCell>\r\n                          <TableCell>{lead.name}</TableCell>\r\n                          <TableCell>{lead.email}</TableCell>\r\n                          <TableCell>{lead.phoneNumber}</TableCell>\r\n                          <TableCell>{lead.address}</TableCell>\r\n                          <TableCell>{lead.leadStatus}</TableCell>\r\n                          <TableCell>{lead.source}</TableCell>\r\n                          <TableCell>\r\n                            {new Date(lead.createdAt).toLocaleDateString()}\r\n                          </TableCell>\r\n                          <TableCell>{lead.userName || \"-\"}</TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </MuiTable>\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n\r\n      <Dialog\r\n        open={openDialog}\r\n        onClose={() => setOpenDialog(false)}\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle>Assign Leads to Employee</DialogTitle>\r\n        <DialogContent>\r\n          <p>You have selected {selectedLeads.length} leads.</p>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Select Employee</InputLabel>\r\n            <Select\r\n              value={selectedEmployeeId}\r\n              onChange={(e) => setSelectedEmployeeId(e.target.value)}\r\n            >\r\n              {employees.map((emp) => (\r\n                <MenuItem key={emp.id} value={emp.id}>\r\n                  {emp.firstName} {emp.lastName}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleAssignLeads}\r\n            color=\"primary\"\r\n            disabled={!selectedEmployeeId}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,MAAM,EACNC,QAAQ,EACRC,MAAM,EACNC,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,WAAW,EACXC,gBAAgB,EAChBC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,KAAK,IAAIC,QAAQ,EACjBC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,QAAQ,QACH,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,0BAA0B;AAErD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,aAAa,MAAM,kCAAkC;AAC5D,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,UAAU,MAAM,+BAA+B;AACtD,OAAOC,QAAQ,MAAM,6BAA6B;AAElD,OAAOC,MAAM,MAAM,6DAA6D;AAChF,SACEC,2BAA2B,EAC3BC,qBAAqB,EACrBC,oBAAoB,QACf,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,SAAS,GAAGZ,UAAU,CAACM,MAAM,CAAC;AAEpC,eAAe,SAASO,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC5C,MAAMC,OAAO,GAAGH,SAAS,CAAC,CAAC;EAC3B,MAAMI,SAAS,GAAGC,cAAc,CAACC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}