{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Dialog,DialogTitle,DialogContent,DialogActions,Button,TextField,Grid,Snackbar,MenuItem,Select,InputLabel,FormControl}from\"@material-ui/core\";import{makeStyles}from\"@material-ui/core/styles\";import Card from\"components/Card/Card.js\";import CardHeader from\"components/Card/CardHeader.js\";import CardBody from\"components/Card/CardBody.js\";import GridContainer from\"components/Grid/GridContainer.js\";import GridItem from\"components/Grid/GridItem.js\";import styles from\"assets/jss/material-dashboard-react/views/dashboardStyle.js\";import{fetchAllEmplyeeDetails}from\"views/Apis/AfterLogin\";import{updatePassword}from\"views/Apis/AfterLogin\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const useStyles=makeStyles(styles);export default function ChangePassword(){const classes=useStyles();const[employees,setEmployees]=useState([]);const[selectedEmployeeId,setSelectedEmployeeId]=useState(\"\");const[newPassword,setNewPassword]=useState(\"\");const[loading,setLoading]=useState(false);const[snackbar,setSnackbar]=useState({open:false,severity:\"success\",message:\"\"});// Fetch all employees on component mount\nuseEffect(()=>{fetchEmployees();},[]);const fetchEmployees=async()=>{try{setLoading(true);const data=await fetchAllEmplyeeDetails();setEmployees(data);}catch(error){console.error(\"Error fetching employees:\",error.message);setSnackbar({open:true,severity:\"error\",message:`Failed to fetch employees: ${error.message}`});}finally{setLoading(false);}};const handleEmployeeChange=event=>{setSelectedEmployeeId(event.target.value);setNewPassword(\"\");// Reset password field when employee changes\n};const handlePasswordChange=event=>{setNewPassword(event.target.value);};const handleSubmit=async()=>{if(!selectedEmployeeId){setSnackbar({open:true,severity:\"warning\",message:\"Please select an employee\"});return;}if(!newPassword){setSnackbar({open:true,severity:\"warning\",message:\"Please enter a new password\"});return;}try{setLoading(true);const response=await updatePassword(selectedEmployeeId,newPassword);if(response.success){setSnackbar({open:true,severity:\"success\",message:response.message||\"Password changed successfully\"});setSelectedEmployeeId(\"\");setNewPassword(\"\");}else{setSnackbar({open:true,severity:\"error\",message:response.message||\"Failed to change password\"});}}catch(error){console.error(\"Error changing password:\",error);setSnackbar({open:true,severity:\"error\",message:`Error changing password: ${error.message}`});}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(GridContainer,{justify:\"center\",children:/*#__PURE__*/_jsx(GridItem,{xs:12,sm:8,md:6,lg:4,children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(CardHeader,{color:\"primary\",children:[/*#__PURE__*/_jsx(\"h4\",{className:classes.cardTitleWhite,children:\"Change Password\"}),/*#__PURE__*/_jsx(\"p\",{className:classes.cardCategoryWhite,children:\"Select employee and update password\"})]}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Select Employee\"}),/*#__PURE__*/_jsx(Select,{value:selectedEmployeeId,onChange:handleEmployeeChange,disabled:loading,children:employees.map(employee=>/*#__PURE__*/_jsxs(MenuItem,{value:employee.id,children:[employee.firstName,\" \",employee.lastName]},employee.id))})]})}),selectedEmployeeId&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(TextField,{label:\"New Password\",type:\"password\",fullWidth:true,value:newPassword,onChange:handlePasswordChange,placeholder:\"Enter new password\"})}),selectedEmployeeId&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:handleSubmit,disabled:!newPassword,fullWidth:true,children:\"Change Password\"})})]})})]})})}),/*#__PURE__*/_jsx(Snackbar,{open:snackbar.open,autoHideDuration:4000,onClose:()=>setSnackbar({...snackbar,open:false}),message:snackbar.message})]});}","map":{"version":3,"names":["React","useState","useEffect","Dialog","DialogTitle","DialogContent","DialogActions","Button","TextField","Grid","Snackbar","MenuItem","Select","InputLabel","FormControl","makeStyles","Card","CardHeader","CardBody","GridContainer","GridItem","styles","fetchAllEmplyeeDetails","updatePassword","jsx","_jsx","jsxs","_jsxs","useStyles","ChangePassword","classes","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","newPassword","setNewPassword","loading","setLoading","snackbar","setSnackbar","open","severity","message","fetchEmployees","data","error","console","handleEmployeeChange","event","target","value","handlePasswordChange","handleSubmit","response","success","children","justify","xs","sm","md","lg","color","className","cardTitleWhite","cardCategoryWhite","container","spacing","item","fullWidth","onChange","disabled","map","employee","id","firstName","lastName","label","type","placeholder","variant","onClick","autoHideDuration","onClose"],"sources":["/Users/anjanyelle/Desktop/tax/taxserves_react_crm_dashboard/src/views/Authentication/ChangePassword.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  Snackbar,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"components/Card/Card.js\";\r\nimport CardHeader from \"components/Card/CardHeader.js\";\r\nimport CardBody from \"components/Card/CardBody.js\";\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\r\nimport { fetchAllEmplyeeDetails } from \"views/Apis/AfterLogin\";\r\nimport { updatePassword } from \"views/Apis/AfterLogin\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function ChangePassword() {\r\n  const classes = useStyles();\r\n\r\n  const [employees, setEmployees] = useState([]);\r\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n\r\n  // Fetch all employees on component mount\r\n  useEffect(() => {\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchEmployees = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await fetchAllEmplyeeDetails();\r\n      setEmployees(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching employees:\", error.message);\r\n      setSnackbar({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: `Failed to fetch employees: ${error.message}`,\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEmployeeChange = (event) => {\r\n    setSelectedEmployeeId(event.target.value);\r\n    setNewPassword(\"\"); // Reset password field when employee changes\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setNewPassword(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n  if (!selectedEmployeeId) {\r\n    setSnackbar({\r\n      open: true,\r\n      severity: \"warning\",\r\n      message: \"Please select an employee\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (!newPassword) {\r\n    setSnackbar({\r\n      open: true,\r\n      severity: \"warning\",\r\n      message: \"Please enter a new password\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    setLoading(true);\r\n\r\n\r\n\r\n    const response = await updatePassword(selectedEmployeeId, newPassword);\r\n   \r\n\r\n\r\n    if (response.success) {\r\n      setSnackbar({\r\n        open: true,\r\n        severity: \"success\",\r\n        message: response.message || \"Password changed successfully\",\r\n      });\r\n\r\n\r\n      setSelectedEmployeeId(\"\");\r\n      setNewPassword(\"\");\r\n    } else {\r\n      setSnackbar({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: response.message || \"Failed to change password\",\r\n      });\r\n    }\r\n  }\r\n\r\n  catch (error) {\r\n    console.error(\"Error changing password:\", error);\r\n    setSnackbar({\r\n      open: true,\r\n      severity: \"error\",\r\n      message: `Error changing password: ${error.message}`,\r\n    });\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <GridContainer justify=\"center\">\r\n        <GridItem xs={12} sm={8} md={6} lg={4}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>Change Password</h4>\r\n              <p className={classes.cardCategoryWhite}>\r\n                Select employee and update password\r\n              </p>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Grid container spacing={3}>\r\n                {/* Employee Selection Dropdown */}\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Select Employee</InputLabel>\r\n                    <Select\r\n                      value={selectedEmployeeId}\r\n                      onChange={handleEmployeeChange}\r\n                      disabled={loading}\r\n                    >\r\n                      {employees.map((employee) => (\r\n                        <MenuItem key={employee.id} value={employee.id}>\r\n                          {employee.firstName} {employee.lastName}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                {/* Password Field - Only show when employee is selected */}\r\n                {selectedEmployeeId && (\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      label=\"New Password\"\r\n                      type=\"password\"\r\n                      fullWidth\r\n                      value={newPassword}\r\n                      onChange={handlePasswordChange}\r\n                      placeholder=\"Enter new password\"\r\n                    />\r\n                  </Grid>\r\n                )}\r\n\r\n                {/* Submit Button - Only show when employee is selected */}\r\n                {selectedEmployeeId && (\r\n                  <Grid item xs={12}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleSubmit}\r\n                      disabled={!newPassword}\r\n                      fullWidth\r\n                    >\r\n                      Change Password\r\n                    </Button>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={4000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        message={snackbar.message}\r\n      />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}