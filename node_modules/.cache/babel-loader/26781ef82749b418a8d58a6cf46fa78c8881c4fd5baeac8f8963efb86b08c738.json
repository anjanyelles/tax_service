{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\");\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n  durations = 500;\nvar delays2 = 80,\n  durations2 = 500;\n\n// ##############################\n// // // Daily Sales\n// #############################\n\nconst dailySalesChart = {\n  data: {\n    labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\n    series: [[12, 17, 7, 17, 23, 18, 38]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 50,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  // for animation\n  animation: {\n    draw: function (data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\n// ##############################\n// // // Email Subscriptions\n// #############################\n\nconst emailsSubscriptionChart = {\n  data: {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n  },\n  options: {\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [[\"screen and (max-width: 640px)\", {\n    seriesBarDistance: 5,\n    axisX: {\n      labelInterpolationFnc: function (value) {\n        return value[0];\n      }\n    }\n  }]],\n  animation: {\n    draw: function (data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nconst completedTasksChart = {\n  data: {\n    labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\n    series: [[230, 750, 450, 300, 280, 240, 200, 190]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 1000,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function (data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  dailySalesChart,\n  emailsSubscriptionChart,\n  completedTasksChart\n};","map":{"version":3,"names":["Chartist","require","delays","durations","delays2","durations2","dailySalesChart","data","labels","series","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","emailsSubscriptionChart","axisX","showGrid","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","completedTasksChart","module","exports"],"sources":["/Users/anjanyelle/Desktop/tax/taxserves_react_crm_dashboard/src/variables/charts.js"],"sourcesContent":["// ##############################\r\n// // // javascript library for creating charts\r\n// #############################\r\nvar Chartist = require(\"chartist\");\r\n\r\n// ##############################\r\n// // // variables used to create animation on charts\r\n// #############################\r\nvar delays = 80,\r\n  durations = 500;\r\nvar delays2 = 80,\r\n  durations2 = 500;\r\n\r\n// ##############################\r\n// // // Daily Sales\r\n// #############################\r\n\r\nconst dailySalesChart = {\r\n  data: {\r\n    labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\r\n    series: [[12, 17, 7, 17, 23, 18, 38]],\r\n  },\r\n  options: {\r\n    lineSmooth: Chartist.Interpolation.cardinal({\r\n      tension: 0,\r\n    }),\r\n    low: 0,\r\n    high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\r\n    chartPadding: {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n    },\r\n  },\r\n  // for animation\r\n  animation: {\r\n    draw: function (data) {\r\n      if (data.type === \"line\" || data.type === \"area\") {\r\n        data.element.animate({\r\n          d: {\r\n            begin: 600,\r\n            dur: 700,\r\n            from: data.path\r\n              .clone()\r\n              .scale(1, 0)\r\n              .translate(0, data.chartRect.height())\r\n              .stringify(),\r\n            to: data.path.clone().stringify(),\r\n            easing: Chartist.Svg.Easing.easeOutQuint,\r\n          },\r\n        });\r\n      } else if (data.type === \"point\") {\r\n        data.element.animate({\r\n          opacity: {\r\n            begin: (data.index + 1) * delays,\r\n            dur: durations,\r\n            from: 0,\r\n            to: 1,\r\n            easing: \"ease\",\r\n          },\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\n// ##############################\r\n// // // Email Subscriptions\r\n// #############################\r\n\r\nconst emailsSubscriptionChart = {\r\n  data: {\r\n    labels: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n    series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]],\r\n  },\r\n  options: {\r\n    axisX: {\r\n      showGrid: false,\r\n    },\r\n    low: 0,\r\n    high: 1000,\r\n    chartPadding: {\r\n      top: 0,\r\n      right: 5,\r\n      bottom: 0,\r\n      left: 0,\r\n    },\r\n  },\r\n  responsiveOptions: [\r\n    [\r\n      \"screen and (max-width: 640px)\",\r\n      {\r\n        seriesBarDistance: 5,\r\n        axisX: {\r\n          labelInterpolationFnc: function (value) {\r\n            return value[0];\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  ],\r\n  animation: {\r\n    draw: function (data) {\r\n      if (data.type === \"bar\") {\r\n        data.element.animate({\r\n          opacity: {\r\n            begin: (data.index + 1) * delays2,\r\n            dur: durations2,\r\n            from: 0,\r\n            to: 1,\r\n            easing: \"ease\",\r\n          },\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\n// ##############################\r\n// // // Completed Tasks\r\n// #############################\r\n\r\nconst completedTasksChart = {\r\n  data: {\r\n    labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\r\n    series: [[230, 750, 450, 300, 280, 240, 200, 190]],\r\n  },\r\n  options: {\r\n    lineSmooth: Chartist.Interpolation.cardinal({\r\n      tension: 0,\r\n    }),\r\n    low: 0,\r\n    high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\r\n    chartPadding: {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n    },\r\n  },\r\n  animation: {\r\n    draw: function (data) {\r\n      if (data.type === \"line\" || data.type === \"area\") {\r\n        data.element.animate({\r\n          d: {\r\n            begin: 600,\r\n            dur: 700,\r\n            from: data.path\r\n              .clone()\r\n              .scale(1, 0)\r\n              .translate(0, data.chartRect.height())\r\n              .stringify(),\r\n            to: data.path.clone().stringify(),\r\n            easing: Chartist.Svg.Easing.easeOutQuint,\r\n          },\r\n        });\r\n      } else if (data.type === \"point\") {\r\n        data.element.animate({\r\n          opacity: {\r\n            begin: (data.index + 1) * delays,\r\n            dur: durations,\r\n            from: 0,\r\n            to: 1,\r\n            easing: \"ease\",\r\n          },\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\nmodule.exports = {\r\n  dailySalesChart,\r\n  emailsSubscriptionChart,\r\n  completedTasksChart,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}